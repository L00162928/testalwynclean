# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Demo workflow cleanercode v0.3

on:
  schedule:
   # Run once a day at 9AM PDT (16 UTC) on week days (1-5)
    - cron: '00 16 * * 1-5'
  push:
    branches: [ test ]
    paths: [ '**.java', '.github/workflows/mvntest.yml', 'docs/index.html' ]
  pull_request:
    branches: [ test ]

jobs:
  build-on-ubuntu:
    runs-on: ubuntu-latest

    steps:
    - name: Step 1 - Checkout branch from GitHub
      uses: actions/checkout@v2
    
    - name: Step 2 - Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: 11
        distribution: adopt
     
    - name: Step 3 - Set up a cache for Maven(Stephen)
      uses: actions/cache@v2
      with:
        path: 
          ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2-
        
    - name: Build docs with Maven
      run: mvn javadoc:javadoc --file mvnCleanerCodeDemo/pom.xml
    - name: Copy to Documentation Website Location
      run: mkdir mvnCleanerCodeDemo/doc/api && cp -r mvnCleanerCodeDemo/target/site/apidocs/. mvnCleanerCodeDemo/doc/api
    - name: Tidy up the javadocs
      id: tidy
      uses: cicirello/javadoc-cleanup@v1
      with:
        base-url-path: https://github.com/L00162928/testalwynclean
        path-to-root: docs
        user-defined-block: |
          <link rel="icon" href="/images/favicon48.png" sizes="16x16 32x32 48x48" type="image/png">
          <link rel="icon" href="/images/favicon96.png" sizes="96x96" type="image/png">
          <link rel="icon" href="/images/favicon144.png" sizes="144x144" type="image/png">
          <link rel="icon" href="/images/favicon192.png" sizes="192x192" type="image/png">
          <link rel="icon" href="/images/favicon384.png" sizes="384x384" type="image/png">
    - name: Log javadoc-cleanup output
      run: |
        echo "modified-count = ${{ steps.tidy.outputs.modified-count }}"
    - name: Commit documentation changes
      run: |
        if [[ `git status --porcelain` ]]; then
          git config --global user.name 'L00162928'
          git config --global user.email 'L00162928@student.lyit.ie'
          git add -A
          git commit -m "Automated API website updates."
        fi
    - name: Generate the sitemap
      id: sitemap
      uses: cicirello/generate-sitemap@v1
      with:
        base-url-path: https://github.com/L00162928/testalwynclean
        path-to-root: docs 
        
    - name: Step 4 - Build Maven project
      run:  mvn -B clean package site --file mvnCleanerCodeDemo/pom.xml
    - name: Step 5 - List the environment variables
      run: env
    

     
  #  - name: Step 7 - Junit test(Emil)
   
  #  - name: Step 8 - Security checking(Sai)
  # Start Fortify on Demand SAST scan and wait until results complete. For more information on FoDUploader commands, see https://github.com/fod-dev/fod-uploader-java
  # TODO: Update ENV variables for your application and create the necessary GitHub Secrets.  Helpful hints:
  #   Credentials and release ID should be obtained from your FoD tenant (either Personal Access Token or API Key can be used).
  #   Automated Audit preference should be configured for the release's Static Scan Settings in the Fortify on Demand portal.
  #  - name: Download Fortify on Demand Universal CI Tool
  #    uses: fortify/gha-setup-fod-uploader@v1
  #  - name: Perform SAST Scan
  #    run: java -jar $FOD_UPLOAD_JAR -z package.zip -aurl $FOD_API_URL -purl $FOD_URL -rid "$FOD_RELEASE_ID" -tc "$FOD_TENANT" -uc "$FOD_USER" "$FOD_PAT" $FOD_UPLOADER_OPTS -n "$FOD_UPLOADER_NOTES"
  #    env: 
  #      FOD_TENANT: ${{ secrets.FOD_TENANT }}  
  #      FOD_USER: ${{ secrets.FOD_USER }}
  #      FOD_PAT: ${{ secrets.FOD_PAT }}
  #      FOD_RELEASE_ID: ${{ secrets.FOD_RELEASE_ID }}
  #      FOD_URL: "https://ams.fortify.com/"
  #      FOD_API_URL: "https://api.ams.fortify.com/"
  #      FOD_UPLOADER_OPTS: "-ep 2 -pp 0 -I 1 -apf"
  #      FOD_UPLOADER_NOTES: 'Triggered by GitHub Actions (${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})'
    
  # Once scan completes, pull SAST issues from Fortify on Demand and generate SARIF output.
  # TODO: Review Action inputs. For most users, these will be the same as used in the Perform SAST Scan step.
  #  - name: Download Results
  #    uses: fortify/gha-fod-generate-sarif@1.1.0
  #    with:
  #      base-url: https://ams.fortify.com
  #      tenant: ${{ secrets.FOD_TENANT }}
  #      user: ${{ secrets.FOD_USER }}
  #      password: ${{ secrets.FOD_PAT }}
  #      release-id: ${{ secrets.FOD_RELEASE_ID }}
  #      output: ./sarif/output.sarif
  # Import Fortify on Demand results to GitHub Security Code Scanning
  #  - name: Import Results
  #    uses: github/codeql-action/upload-sarif@v1
  #    with:
  #      sarif_file: ./sarif/output.sarif
  
 
       
   #  - name: Step 10 - Workflow artifact download(TBA)
  
    - name: Step 10 - Persist Workflow data as artifacts(Alwyn)
      run: mkdir staging && cp mvnCleanerCodeDemo/target/*.jar staging     
    - uses: actions/upload-artifact@v2
      with:
        name:  github-actions-artifact
        path:  staging    

  ##################################################################################
  
  build-on-windows:
    runs-on: windows-latest
  
    steps:
    - name: Step 1 - Checkout branch from GitHub
      uses: actions/checkout@v2
    
    - name: Step 2 - Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: 11
        distribution: adopt
     
    - name: Step 3 - Set up a cache for Maven(Stephen)
      uses: actions/cache@v2
      with:
        path: 
          ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2-
        
    - name: Step 4 - Build Maven project
      run:  mvn -B package --file mvnCleanerCodeDemo/pom.xml
      
    - name: Step 5 - List the environment variables
      run: env
    
  #  - name: Step 6 - Code check using SonarQube(Peter)
  #    run: mvn clean verify sonar:sonar -Dsonar.login=myAuthenticationToken|
  #       echo Add other actions to build,
  #       echo test, and deploy your project.
     
  #  - name: Step 7 - Junit test(Emil)
   
  #  - name: Step 8 - Security checking(Sai)
  # Start Fortify on Demand SAST scan and wait until results complete. For more information on FoDUploader commands, see https://github.com/fod-dev/fod-uploader-java
  # TODO: Update ENV variables for your application and create the necessary GitHub Secrets.  Helpful hints:
  #   Credentials and release ID should be obtained from your FoD tenant (either Personal Access Token or API Key can be used).
  #   Automated Audit preference should be configured for the release's Static Scan Settings in the Fortify on Demand portal.
  #  - name: Download Fortify on Demand Universal CI Tool
  #    uses: fortify/gha-setup-fod-uploader@v1
  #  - name: Perform SAST Scan
  #    run: java -jar $FOD_UPLOAD_JAR -z package.zip -aurl $FOD_API_URL -purl $FOD_URL -rid "$FOD_RELEASE_ID" -tc "$FOD_TENANT" -uc "$FOD_USER" "$FOD_PAT" $FOD_UPLOADER_OPTS -n "$FOD_UPLOADER_NOTES"
  #    env: 
  #      FOD_TENANT: ${{ secrets.FOD_TENANT }}  
  #      FOD_USER: ${{ secrets.FOD_USER }}
  #      FOD_PAT: ${{ secrets.FOD_PAT }}
  #      FOD_RELEASE_ID: ${{ secrets.FOD_RELEASE_ID }}
  #      FOD_URL: "https://ams.fortify.com/"
  #      FOD_API_URL: "https://api.ams.fortify.com/"
  #      FOD_UPLOADER_OPTS: "-ep 2 -pp 0 -I 1 -apf"
  #      FOD_UPLOADER_NOTES: 'Triggered by GitHub Actions (${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})'
    
  # Once scan completes, pull SAST issues from Fortify on Demand and generate SARIF output.
  # TODO: Review Action inputs. For most users, these will be the same as used in the Perform SAST Scan step.
  #  - name: Download Results
  #    uses: fortify/gha-fod-generate-sarif@1.1.0
  #    with:
  #      base-url: https://ams.fortify.com
  #      tenant: ${{ secrets.FOD_TENANT }}
  #      user: ${{ secrets.FOD_USER }}
  #      password: ${{ secrets.FOD_PAT }}
  #      release-id: ${{ secrets.FOD_RELEASE_ID }}
  #      output: ./sarif/output.sarif
  # Import Fortify on Demand results to GitHub Security Code Scanning
  #  - name: Import Results
  #    uses: github/codeql-action/upload-sarif@v1
  #    with:
  #      sarif_file: ./sarif/output.sarif
  
  #- name: Step 9 - Performance management using Jmeter(Vinu)
  
  #  - name: Step 9 - PerfAction for JMeter (Performance management - Vinu)
  #    uses: QAInsights/PerfAction@2.0
  #    with:
  #    jmeter test plan to execute
  #     test-plan-path: ./mvnCleanerCodeDemo/src/perfTest/testPlan/SampleTest.jmx
  #   Optional arguments.
  #     args: " "
     
  #  jmeter Upload results to artifact
  #  - name: Upload Results (Performance management - Vinu)
  #    uses: actions/upload-artifact@v2
  #   with:
  #    name: jmeter-results
  #     path: result.jtl
       
   #  - name: Step 10 - Workflow artifact download
  
    - name: Step 10 - Persist Workflow data as artifacts(Alwyn)
      run: mkdir staging && cp mvnCleanerCodeDemo/target/*.jar staging     
    - uses: actions/upload-artifact@v2
      with:
        name:  github-actions-artifact
        path:  staging    	
  ##################################################################################
  
  build-on-macos:
    runs-on: macos-latest
  
    steps:
    - name: Step 1 - Checkout branch from GitHub
      uses: actions/checkout@v2
    
    - name: Step 2 - Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: 11
        distribution: adopt
     
    - name: Step 3 - Set up a cache for Maven(Stephen)
      uses: actions/cache@v2
      with:
        path: 
          ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2-
        
    - name: Step 4 - Build Maven project
      run:  mvn -B package --file mvnCleanerCodeDemo/pom.xml
      
    - name: Step 5 - List the environment variables
      run: env
      
    - name: Step 6 - Code check using SonarQube(Peter)
      run: mvn clean verify sonar:sonar -Dsonar.login=myAuthenticationToken|
          echo Add other actions to build,
          echo test, and deploy your project.
     
  #  - name: Step 7 - Junit test(Emil)
   
  #  - name: Step 8 - Security checking(Sai)
  # Start Fortify on Demand SAST scan and wait until results complete. For more information on FoDUploader commands, see https://github.com/fod-dev/fod-uploader-java
  # TODO: Update ENV variables for your application and create the necessary GitHub Secrets.  Helpful hints:
  #   Credentials and release ID should be obtained from your FoD tenant (either Personal Access Token or API Key can be used).
  #   Automated Audit preference should be configured for the release's Static Scan Settings in the Fortify on Demand portal.
  #  - name: Download Fortify on Demand Universal CI Tool
  #    uses: fortify/gha-setup-fod-uploader@v1
  #  - name: Perform SAST Scan
  #    run: java -jar $FOD_UPLOAD_JAR -z package.zip -aurl $FOD_API_URL -purl $FOD_URL -rid "$FOD_RELEASE_ID" -tc "$FOD_TENANT" -uc "$FOD_USER" "$FOD_PAT" $FOD_UPLOADER_OPTS -n "$FOD_UPLOADER_NOTES"
  #    env: 
  #      FOD_TENANT: ${{ secrets.FOD_TENANT }}  
  #      FOD_USER: ${{ secrets.FOD_USER }}
  #      FOD_PAT: ${{ secrets.FOD_PAT }}
  #      FOD_RELEASE_ID: ${{ secrets.FOD_RELEASE_ID }}
  #      FOD_URL: "https://ams.fortify.com/"
  #      FOD_API_URL: "https://api.ams.fortify.com/"
  #      FOD_UPLOADER_OPTS: "-ep 2 -pp 0 -I 1 -apf"
  #      FOD_UPLOADER_NOTES: 'Triggered by GitHub Actions (${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})'
    
  # Once scan completes, pull SAST issues from Fortify on Demand and generate SARIF output.
  # TODO: Review Action inputs. For most users, these will be the same as used in the Perform SAST Scan step.
  #  - name: Download Results
  #    uses: fortify/gha-fod-generate-sarif@1.1.0
  #    with:
  #      base-url: https://ams.fortify.com
  #      tenant: ${{ secrets.FOD_TENANT }}
  #      user: ${{ secrets.FOD_USER }}
  #      password: ${{ secrets.FOD_PAT }}
  #      release-id: ${{ secrets.FOD_RELEASE_ID }}
  #      output: ./sarif/output.sarif
  # Import Fortify on Demand results to GitHub Security Code Scanning
  #  - name: Import Results
  #    uses: github/codeql-action/upload-sarif@v1
  #    with:
  #      sarif_file: ./sarif/output.sarif
  
  #- name: Step 9 - Performance management using Jmeter(Vinu)
  
  #  - name: Step 9 - PerfAction for JMeter (Performance management - Vinu)
  #    uses: QAInsights/PerfAction@2.0
  #    with:
  #    jmeter test plan to execute
  #     test-plan-path: ./mvnCleanerCodeDemo/src/perfTest/testPlan/SampleTest.jmx
  #   Optional arguments.
  #     args: " "
     
  #  jmeter Upload results to artifact
  #  - name: Upload Results (Performance management - Vinu)
  #    uses: actions/upload-artifact@v2
  #   with:
  #    name: jmeter-results
  #     path: result.jtl
       
  # - name: Step 10 - Workflow artifact download
  
    - name: Step 10 - Persist Workflow data as artifacts(Alwyn)
      run: mkdir staging && cp mvnCleanerCodeDemo/target/*.jar staging     
    - uses: actions/upload-artifact@v2
      with:
        name:  github-actions-artifact
        path:  staging
    - name: Step 10 - Persist Workflow data as artifacts(Alwyn)    
      run: mkdir report && cp mvnCleanerCodeDemo/target/surefire-reports/*.txt report     
    - uses: actions/upload-artifact@v2
      with:
        name:  github-actions-artifact
        path:  report     
  ##################################################################################

